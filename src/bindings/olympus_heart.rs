#![allow(clippy::all)]
//! This lib contains abigen! generated bindings for solidity contracts.
//! This is autogenerated code.
//! Do not manually edit these files.
//! These files may be overwritten by the codegen system at any time.
pub use olympus_heart::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod olympus_heart {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("kernel_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract Kernel"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("operator_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract IOperator"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("distributor_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract IDistributor"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("maxReward_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("uint256"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("auctionDuration_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Uint(48usize),
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("uint48"),
                        ),
                    },
                ],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("ROLES"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("ROLES"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ROLESv1"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("activate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("activate"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("active"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("active"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("auctionDuration"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("auctionDuration"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(48usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint48"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("beat"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("beat"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("changeKernel"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("changeKernel"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("newKernel_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract Kernel"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("configureDependencies"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "configureDependencies",
                            ),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("dependencies"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::FixedBytes(5usize),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("Keycode[]"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("currentReward"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("currentReward"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("deactivate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("deactivate"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("distributor"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("distributor"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IDistributor"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("frequency"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("frequency"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(48usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint48"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("isActive"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("isActive"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("kernel"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("kernel"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract Kernel"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("lastBeat"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("lastBeat"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(48usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint48"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("maxReward"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("maxReward"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("operator"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("operator"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IOperator"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("requestPermissions"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("requestPermissions"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("permissions"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Tuple(
                                                ::std::vec![
                                                    ::ethers::core::abi::ethabi::ParamType::FixedBytes(5usize),
                                                    ::ethers::core::abi::ethabi::ParamType::FixedBytes(4usize),
                                                ],
                                            ),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("struct Permissions[]"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("resetBeat"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("resetBeat"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("setDistributor"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("setDistributor"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("distributor_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("setOperator"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("setOperator"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("operator_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("setRewardAuctionParams"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "setRewardAuctionParams",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("maxReward_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("auctionDuration_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(48usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint48"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("Beat"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("Beat"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("timestamp_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("RewardIssued"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("RewardIssued"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("to_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("rewardAmount_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("RewardUpdated"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("RewardUpdated"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("maxRewardAmount_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("auctionDuration_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(48usize),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
            ]),
            errors: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("Heart_BeatAvailable"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "Heart_BeatAvailable",
                            ),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Heart_BeatStopped"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("Heart_BeatStopped"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Heart_InvalidParams"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "Heart_InvalidParams",
                            ),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Heart_OutOfCycle"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("Heart_OutOfCycle"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Heart_WrongModuleVersion"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "Heart_WrongModuleVersion",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("expectedMajors"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                        ),
                                        3usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint8[3]"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("KernelAdapter_OnlyKernel"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "KernelAdapter_OnlyKernel",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("caller_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Policy_ModuleDoesNotExist"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "Policy_ModuleDoesNotExist",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("keycode_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedBytes(
                                        5usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("Keycode"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Policy_WrongModuleVersion"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "Policy_WrongModuleVersion",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("expected_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
            ]),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static OLYMPUSHEART_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    pub struct OlympusHeart<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for OlympusHeart<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for OlympusHeart<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for OlympusHeart<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for OlympusHeart<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(OlympusHeart))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> OlympusHeart<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    OLYMPUSHEART_ABI.clone(),
                    client,
                ),
            )
        }
        ///Calls the contract's `ROLES` (0x923cb952) function
        pub fn roles(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([146, 60, 185, 82], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `activate` (0x0f15f4c0) function
        pub fn activate(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([15, 21, 244, 192], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `active` (0x02fb0c5e) function
        pub fn active(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([2, 251, 12, 94], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `auctionDuration` (0x0cbf54c8) function
        pub fn auction_duration(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u64> {
            self.0
                .method_hash([12, 191, 84, 200], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `beat` (0x7a259dba) function
        pub fn beat(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([122, 37, 157, 186], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `changeKernel` (0x4657b36c) function
        pub fn change_kernel(
            &self,
            new_kernel: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([70, 87, 179, 108], new_kernel)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `configureDependencies` (0x9459b875) function
        pub fn configure_dependencies(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::vec::Vec<[u8; 5]>> {
            self.0
                .method_hash([148, 89, 184, 117], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `currentReward` (0x07621eca) function
        pub fn current_reward(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([7, 98, 30, 202], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `deactivate` (0x51b42b00) function
        pub fn deactivate(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([81, 180, 43, 0], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `distributor` (0xbfe10928) function
        pub fn distributor(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([191, 225, 9, 40], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `frequency` (0xead50da3) function
        pub fn frequency(&self) -> ::ethers::contract::builders::ContractCall<M, u64> {
            self.0
                .method_hash([234, 213, 13, 163], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isActive` (0x22f3e2d4) function
        pub fn is_active(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([34, 243, 226, 212], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `kernel` (0xd4aae0c4) function
        pub fn kernel(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([212, 170, 224, 196], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastBeat` (0xd3a7b7d3) function
        pub fn last_beat(&self) -> ::ethers::contract::builders::ContractCall<M, u64> {
            self.0
                .method_hash([211, 167, 183, 211], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `maxReward` (0x66a78e6c) function
        pub fn max_reward(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([102, 167, 142, 108], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `operator` (0x570ca735) function
        pub fn operator(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([87, 12, 167, 53], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `requestPermissions` (0x5924be70) function
        pub fn request_permissions(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<Permissions>,
        > {
            self.0
                .method_hash([89, 36, 190, 112], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `resetBeat` (0xef68b87d) function
        pub fn reset_beat(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([239, 104, 184, 125], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setDistributor` (0x75619ab5) function
        pub fn set_distributor(
            &self,
            distributor: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([117, 97, 154, 181], distributor)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setOperator` (0xb3ab15fb) function
        pub fn set_operator(
            &self,
            operator: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([179, 171, 21, 251], operator)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setRewardAuctionParams` (0x7539c13f) function
        pub fn set_reward_auction_params(
            &self,
            max_reward: ::ethers::core::types::U256,
            auction_duration: u64,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([117, 57, 193, 63], (max_reward, auction_duration))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Beat` event
        pub fn beat_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, BeatFilter> {
            self.0.event()
        }
        ///Gets the contract's `RewardIssued` event
        pub fn reward_issued_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RewardIssuedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RewardUpdated` event
        pub fn reward_updated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RewardUpdatedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OlympusHeartEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for OlympusHeart<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `Heart_BeatAvailable` with signature `Heart_BeatAvailable()` and selector `0x2f36f8a4`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Heart_BeatAvailable", abi = "Heart_BeatAvailable()")]
    pub struct Heart_BeatAvailable;
    ///Custom Error type `Heart_BeatStopped` with signature `Heart_BeatStopped()` and selector `0x9bf7f180`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Heart_BeatStopped", abi = "Heart_BeatStopped()")]
    pub struct Heart_BeatStopped;
    ///Custom Error type `Heart_InvalidParams` with signature `Heart_InvalidParams()` and selector `0x97440c9c`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Heart_InvalidParams", abi = "Heart_InvalidParams()")]
    pub struct Heart_InvalidParams;
    ///Custom Error type `Heart_OutOfCycle` with signature `Heart_OutOfCycle()` and selector `0x8c377706`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Heart_OutOfCycle", abi = "Heart_OutOfCycle()")]
    pub struct Heart_OutOfCycle;
    ///Custom Error type `Heart_WrongModuleVersion` with signature `Heart_WrongModuleVersion(uint8[3])` and selector `0xb78206ef`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "Heart_WrongModuleVersion",
        abi = "Heart_WrongModuleVersion(uint8[3])"
    )]
    pub struct Heart_WrongModuleVersion {
        pub expected_majors: [u8; 3],
    }
    ///Custom Error type `KernelAdapter_OnlyKernel` with signature `KernelAdapter_OnlyKernel(address)` and selector `0x14fa403c`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "KernelAdapter_OnlyKernel",
        abi = "KernelAdapter_OnlyKernel(address)"
    )]
    pub struct KernelAdapter_OnlyKernel {
        pub caller: ::ethers::core::types::Address,
    }
    ///Custom Error type `Policy_ModuleDoesNotExist` with signature `Policy_ModuleDoesNotExist(bytes5)` and selector `0x5c3fa9cd`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "Policy_ModuleDoesNotExist",
        abi = "Policy_ModuleDoesNotExist(bytes5)"
    )]
    pub struct Policy_ModuleDoesNotExist {
        pub keycode: [u8; 5],
    }
    ///Custom Error type `Policy_WrongModuleVersion` with signature `Policy_WrongModuleVersion(bytes)` and selector `0xdb3ea639`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "Policy_WrongModuleVersion",
        abi = "Policy_WrongModuleVersion(bytes)"
    )]
    pub struct Policy_WrongModuleVersion {
        pub expected: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum OlympusHeartErrors {
        Heart_BeatAvailable(Heart_BeatAvailable),
        Heart_BeatStopped(Heart_BeatStopped),
        Heart_InvalidParams(Heart_InvalidParams),
        Heart_OutOfCycle(Heart_OutOfCycle),
        Heart_WrongModuleVersion(Heart_WrongModuleVersion),
        KernelAdapter_OnlyKernel(KernelAdapter_OnlyKernel),
        Policy_ModuleDoesNotExist(Policy_ModuleDoesNotExist),
        Policy_WrongModuleVersion(Policy_WrongModuleVersion),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for OlympusHeartErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) = <Heart_BeatAvailable as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Heart_BeatAvailable(decoded));
            }
            if let Ok(decoded) = <Heart_BeatStopped as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Heart_BeatStopped(decoded));
            }
            if let Ok(decoded) = <Heart_InvalidParams as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Heart_InvalidParams(decoded));
            }
            if let Ok(decoded) = <Heart_OutOfCycle as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Heart_OutOfCycle(decoded));
            }
            if let Ok(decoded) = <Heart_WrongModuleVersion as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Heart_WrongModuleVersion(decoded));
            }
            if let Ok(decoded) = <KernelAdapter_OnlyKernel as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::KernelAdapter_OnlyKernel(decoded));
            }
            if let Ok(decoded) = <Policy_ModuleDoesNotExist as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Policy_ModuleDoesNotExist(decoded));
            }
            if let Ok(decoded) = <Policy_WrongModuleVersion as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Policy_WrongModuleVersion(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for OlympusHeartErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::Heart_BeatAvailable(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Heart_BeatStopped(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Heart_InvalidParams(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Heart_OutOfCycle(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Heart_WrongModuleVersion(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::KernelAdapter_OnlyKernel(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Policy_ModuleDoesNotExist(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Policy_WrongModuleVersion(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for OlympusHeartErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <Heart_BeatAvailable as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Heart_BeatStopped as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Heart_InvalidParams as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Heart_OutOfCycle as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Heart_WrongModuleVersion as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <KernelAdapter_OnlyKernel as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Policy_ModuleDoesNotExist as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Policy_WrongModuleVersion as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for OlympusHeartErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Heart_BeatAvailable(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Heart_BeatStopped(element) => ::core::fmt::Display::fmt(element, f),
                Self::Heart_InvalidParams(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Heart_OutOfCycle(element) => ::core::fmt::Display::fmt(element, f),
                Self::Heart_WrongModuleVersion(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::KernelAdapter_OnlyKernel(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Policy_ModuleDoesNotExist(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Policy_WrongModuleVersion(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for OlympusHeartErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<Heart_BeatAvailable> for OlympusHeartErrors {
        fn from(value: Heart_BeatAvailable) -> Self {
            Self::Heart_BeatAvailable(value)
        }
    }
    impl ::core::convert::From<Heart_BeatStopped> for OlympusHeartErrors {
        fn from(value: Heart_BeatStopped) -> Self {
            Self::Heart_BeatStopped(value)
        }
    }
    impl ::core::convert::From<Heart_InvalidParams> for OlympusHeartErrors {
        fn from(value: Heart_InvalidParams) -> Self {
            Self::Heart_InvalidParams(value)
        }
    }
    impl ::core::convert::From<Heart_OutOfCycle> for OlympusHeartErrors {
        fn from(value: Heart_OutOfCycle) -> Self {
            Self::Heart_OutOfCycle(value)
        }
    }
    impl ::core::convert::From<Heart_WrongModuleVersion> for OlympusHeartErrors {
        fn from(value: Heart_WrongModuleVersion) -> Self {
            Self::Heart_WrongModuleVersion(value)
        }
    }
    impl ::core::convert::From<KernelAdapter_OnlyKernel> for OlympusHeartErrors {
        fn from(value: KernelAdapter_OnlyKernel) -> Self {
            Self::KernelAdapter_OnlyKernel(value)
        }
    }
    impl ::core::convert::From<Policy_ModuleDoesNotExist> for OlympusHeartErrors {
        fn from(value: Policy_ModuleDoesNotExist) -> Self {
            Self::Policy_ModuleDoesNotExist(value)
        }
    }
    impl ::core::convert::From<Policy_WrongModuleVersion> for OlympusHeartErrors {
        fn from(value: Policy_WrongModuleVersion) -> Self {
            Self::Policy_WrongModuleVersion(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Beat", abi = "Beat(uint256)")]
    pub struct BeatFilter {
        pub timestamp: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RewardIssued", abi = "RewardIssued(address,uint256)")]
    pub struct RewardIssuedFilter {
        pub to: ::ethers::core::types::Address,
        pub reward_amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RewardUpdated", abi = "RewardUpdated(uint256,uint48)")]
    pub struct RewardUpdatedFilter {
        pub max_reward_amount: ::ethers::core::types::U256,
        pub auction_duration: u64,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum OlympusHeartEvents {
        BeatFilter(BeatFilter),
        RewardIssuedFilter(RewardIssuedFilter),
        RewardUpdatedFilter(RewardUpdatedFilter),
    }
    impl ::ethers::contract::EthLogDecode for OlympusHeartEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = BeatFilter::decode_log(log) {
                return Ok(OlympusHeartEvents::BeatFilter(decoded));
            }
            if let Ok(decoded) = RewardIssuedFilter::decode_log(log) {
                return Ok(OlympusHeartEvents::RewardIssuedFilter(decoded));
            }
            if let Ok(decoded) = RewardUpdatedFilter::decode_log(log) {
                return Ok(OlympusHeartEvents::RewardUpdatedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for OlympusHeartEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::BeatFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::RewardIssuedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RewardUpdatedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<BeatFilter> for OlympusHeartEvents {
        fn from(value: BeatFilter) -> Self {
            Self::BeatFilter(value)
        }
    }
    impl ::core::convert::From<RewardIssuedFilter> for OlympusHeartEvents {
        fn from(value: RewardIssuedFilter) -> Self {
            Self::RewardIssuedFilter(value)
        }
    }
    impl ::core::convert::From<RewardUpdatedFilter> for OlympusHeartEvents {
        fn from(value: RewardUpdatedFilter) -> Self {
            Self::RewardUpdatedFilter(value)
        }
    }
    ///Container type for all input parameters for the `ROLES` function with signature `ROLES()` and selector `0x923cb952`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "ROLES", abi = "ROLES()")]
    pub struct RolesCall;
    ///Container type for all input parameters for the `activate` function with signature `activate()` and selector `0x0f15f4c0`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "activate", abi = "activate()")]
    pub struct ActivateCall;
    ///Container type for all input parameters for the `active` function with signature `active()` and selector `0x02fb0c5e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "active", abi = "active()")]
    pub struct ActiveCall;
    ///Container type for all input parameters for the `auctionDuration` function with signature `auctionDuration()` and selector `0x0cbf54c8`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "auctionDuration", abi = "auctionDuration()")]
    pub struct AuctionDurationCall;
    ///Container type for all input parameters for the `beat` function with signature `beat()` and selector `0x7a259dba`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "beat", abi = "beat()")]
    pub struct BeatCall;
    ///Container type for all input parameters for the `changeKernel` function with signature `changeKernel(address)` and selector `0x4657b36c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "changeKernel", abi = "changeKernel(address)")]
    pub struct ChangeKernelCall {
        pub new_kernel: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `configureDependencies` function with signature `configureDependencies()` and selector `0x9459b875`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "configureDependencies", abi = "configureDependencies()")]
    pub struct ConfigureDependenciesCall;
    ///Container type for all input parameters for the `currentReward` function with signature `currentReward()` and selector `0x07621eca`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "currentReward", abi = "currentReward()")]
    pub struct CurrentRewardCall;
    ///Container type for all input parameters for the `deactivate` function with signature `deactivate()` and selector `0x51b42b00`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "deactivate", abi = "deactivate()")]
    pub struct DeactivateCall;
    ///Container type for all input parameters for the `distributor` function with signature `distributor()` and selector `0xbfe10928`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "distributor", abi = "distributor()")]
    pub struct DistributorCall;
    ///Container type for all input parameters for the `frequency` function with signature `frequency()` and selector `0xead50da3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "frequency", abi = "frequency()")]
    pub struct FrequencyCall;
    ///Container type for all input parameters for the `isActive` function with signature `isActive()` and selector `0x22f3e2d4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "isActive", abi = "isActive()")]
    pub struct IsActiveCall;
    ///Container type for all input parameters for the `kernel` function with signature `kernel()` and selector `0xd4aae0c4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "kernel", abi = "kernel()")]
    pub struct KernelCall;
    ///Container type for all input parameters for the `lastBeat` function with signature `lastBeat()` and selector `0xd3a7b7d3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "lastBeat", abi = "lastBeat()")]
    pub struct LastBeatCall;
    ///Container type for all input parameters for the `maxReward` function with signature `maxReward()` and selector `0x66a78e6c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "maxReward", abi = "maxReward()")]
    pub struct MaxRewardCall;
    ///Container type for all input parameters for the `operator` function with signature `operator()` and selector `0x570ca735`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "operator", abi = "operator()")]
    pub struct OperatorCall;
    ///Container type for all input parameters for the `requestPermissions` function with signature `requestPermissions()` and selector `0x5924be70`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "requestPermissions", abi = "requestPermissions()")]
    pub struct RequestPermissionsCall;
    ///Container type for all input parameters for the `resetBeat` function with signature `resetBeat()` and selector `0xef68b87d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "resetBeat", abi = "resetBeat()")]
    pub struct ResetBeatCall;
    ///Container type for all input parameters for the `setDistributor` function with signature `setDistributor(address)` and selector `0x75619ab5`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setDistributor", abi = "setDistributor(address)")]
    pub struct SetDistributorCall {
        pub distributor: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `setOperator` function with signature `setOperator(address)` and selector `0xb3ab15fb`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setOperator", abi = "setOperator(address)")]
    pub struct SetOperatorCall {
        pub operator: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `setRewardAuctionParams` function with signature `setRewardAuctionParams(uint256,uint48)` and selector `0x7539c13f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "setRewardAuctionParams",
        abi = "setRewardAuctionParams(uint256,uint48)"
    )]
    pub struct SetRewardAuctionParamsCall {
        pub max_reward: ::ethers::core::types::U256,
        pub auction_duration: u64,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum OlympusHeartCalls {
        Roles(RolesCall),
        Activate(ActivateCall),
        Active(ActiveCall),
        AuctionDuration(AuctionDurationCall),
        Beat(BeatCall),
        ChangeKernel(ChangeKernelCall),
        ConfigureDependencies(ConfigureDependenciesCall),
        CurrentReward(CurrentRewardCall),
        Deactivate(DeactivateCall),
        Distributor(DistributorCall),
        Frequency(FrequencyCall),
        IsActive(IsActiveCall),
        Kernel(KernelCall),
        LastBeat(LastBeatCall),
        MaxReward(MaxRewardCall),
        Operator(OperatorCall),
        RequestPermissions(RequestPermissionsCall),
        ResetBeat(ResetBeatCall),
        SetDistributor(SetDistributorCall),
        SetOperator(SetOperatorCall),
        SetRewardAuctionParams(SetRewardAuctionParamsCall),
    }
    impl ::ethers::core::abi::AbiDecode for OlympusHeartCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <RolesCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Roles(decoded));
            }
            if let Ok(decoded) = <ActivateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Activate(decoded));
            }
            if let Ok(decoded) = <ActiveCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Active(decoded));
            }
            if let Ok(decoded) = <AuctionDurationCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::AuctionDuration(decoded));
            }
            if let Ok(decoded) = <BeatCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Beat(decoded));
            }
            if let Ok(decoded) = <ChangeKernelCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ChangeKernel(decoded));
            }
            if let Ok(decoded) = <ConfigureDependenciesCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ConfigureDependencies(decoded));
            }
            if let Ok(decoded) = <CurrentRewardCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::CurrentReward(decoded));
            }
            if let Ok(decoded) = <DeactivateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Deactivate(decoded));
            }
            if let Ok(decoded) = <DistributorCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Distributor(decoded));
            }
            if let Ok(decoded) = <FrequencyCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Frequency(decoded));
            }
            if let Ok(decoded) = <IsActiveCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::IsActive(decoded));
            }
            if let Ok(decoded) = <KernelCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Kernel(decoded));
            }
            if let Ok(decoded) = <LastBeatCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LastBeat(decoded));
            }
            if let Ok(decoded) = <MaxRewardCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::MaxReward(decoded));
            }
            if let Ok(decoded) = <OperatorCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Operator(decoded));
            }
            if let Ok(decoded) = <RequestPermissionsCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RequestPermissions(decoded));
            }
            if let Ok(decoded) = <ResetBeatCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ResetBeat(decoded));
            }
            if let Ok(decoded) = <SetDistributorCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SetDistributor(decoded));
            }
            if let Ok(decoded) = <SetOperatorCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SetOperator(decoded));
            }
            if let Ok(decoded) = <SetRewardAuctionParamsCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SetRewardAuctionParams(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for OlympusHeartCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Roles(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Activate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Active(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::AuctionDuration(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Beat(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::ChangeKernel(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ConfigureDependencies(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CurrentReward(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Deactivate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Distributor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Frequency(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsActive(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Kernel(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::LastBeat(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::MaxReward(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Operator(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RequestPermissions(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ResetBeat(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetDistributor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetOperator(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetRewardAuctionParams(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for OlympusHeartCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Roles(element) => ::core::fmt::Display::fmt(element, f),
                Self::Activate(element) => ::core::fmt::Display::fmt(element, f),
                Self::Active(element) => ::core::fmt::Display::fmt(element, f),
                Self::AuctionDuration(element) => ::core::fmt::Display::fmt(element, f),
                Self::Beat(element) => ::core::fmt::Display::fmt(element, f),
                Self::ChangeKernel(element) => ::core::fmt::Display::fmt(element, f),
                Self::ConfigureDependencies(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CurrentReward(element) => ::core::fmt::Display::fmt(element, f),
                Self::Deactivate(element) => ::core::fmt::Display::fmt(element, f),
                Self::Distributor(element) => ::core::fmt::Display::fmt(element, f),
                Self::Frequency(element) => ::core::fmt::Display::fmt(element, f),
                Self::IsActive(element) => ::core::fmt::Display::fmt(element, f),
                Self::Kernel(element) => ::core::fmt::Display::fmt(element, f),
                Self::LastBeat(element) => ::core::fmt::Display::fmt(element, f),
                Self::MaxReward(element) => ::core::fmt::Display::fmt(element, f),
                Self::Operator(element) => ::core::fmt::Display::fmt(element, f),
                Self::RequestPermissions(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ResetBeat(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetDistributor(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetOperator(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetRewardAuctionParams(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<RolesCall> for OlympusHeartCalls {
        fn from(value: RolesCall) -> Self {
            Self::Roles(value)
        }
    }
    impl ::core::convert::From<ActivateCall> for OlympusHeartCalls {
        fn from(value: ActivateCall) -> Self {
            Self::Activate(value)
        }
    }
    impl ::core::convert::From<ActiveCall> for OlympusHeartCalls {
        fn from(value: ActiveCall) -> Self {
            Self::Active(value)
        }
    }
    impl ::core::convert::From<AuctionDurationCall> for OlympusHeartCalls {
        fn from(value: AuctionDurationCall) -> Self {
            Self::AuctionDuration(value)
        }
    }
    impl ::core::convert::From<BeatCall> for OlympusHeartCalls {
        fn from(value: BeatCall) -> Self {
            Self::Beat(value)
        }
    }
    impl ::core::convert::From<ChangeKernelCall> for OlympusHeartCalls {
        fn from(value: ChangeKernelCall) -> Self {
            Self::ChangeKernel(value)
        }
    }
    impl ::core::convert::From<ConfigureDependenciesCall> for OlympusHeartCalls {
        fn from(value: ConfigureDependenciesCall) -> Self {
            Self::ConfigureDependencies(value)
        }
    }
    impl ::core::convert::From<CurrentRewardCall> for OlympusHeartCalls {
        fn from(value: CurrentRewardCall) -> Self {
            Self::CurrentReward(value)
        }
    }
    impl ::core::convert::From<DeactivateCall> for OlympusHeartCalls {
        fn from(value: DeactivateCall) -> Self {
            Self::Deactivate(value)
        }
    }
    impl ::core::convert::From<DistributorCall> for OlympusHeartCalls {
        fn from(value: DistributorCall) -> Self {
            Self::Distributor(value)
        }
    }
    impl ::core::convert::From<FrequencyCall> for OlympusHeartCalls {
        fn from(value: FrequencyCall) -> Self {
            Self::Frequency(value)
        }
    }
    impl ::core::convert::From<IsActiveCall> for OlympusHeartCalls {
        fn from(value: IsActiveCall) -> Self {
            Self::IsActive(value)
        }
    }
    impl ::core::convert::From<KernelCall> for OlympusHeartCalls {
        fn from(value: KernelCall) -> Self {
            Self::Kernel(value)
        }
    }
    impl ::core::convert::From<LastBeatCall> for OlympusHeartCalls {
        fn from(value: LastBeatCall) -> Self {
            Self::LastBeat(value)
        }
    }
    impl ::core::convert::From<MaxRewardCall> for OlympusHeartCalls {
        fn from(value: MaxRewardCall) -> Self {
            Self::MaxReward(value)
        }
    }
    impl ::core::convert::From<OperatorCall> for OlympusHeartCalls {
        fn from(value: OperatorCall) -> Self {
            Self::Operator(value)
        }
    }
    impl ::core::convert::From<RequestPermissionsCall> for OlympusHeartCalls {
        fn from(value: RequestPermissionsCall) -> Self {
            Self::RequestPermissions(value)
        }
    }
    impl ::core::convert::From<ResetBeatCall> for OlympusHeartCalls {
        fn from(value: ResetBeatCall) -> Self {
            Self::ResetBeat(value)
        }
    }
    impl ::core::convert::From<SetDistributorCall> for OlympusHeartCalls {
        fn from(value: SetDistributorCall) -> Self {
            Self::SetDistributor(value)
        }
    }
    impl ::core::convert::From<SetOperatorCall> for OlympusHeartCalls {
        fn from(value: SetOperatorCall) -> Self {
            Self::SetOperator(value)
        }
    }
    impl ::core::convert::From<SetRewardAuctionParamsCall> for OlympusHeartCalls {
        fn from(value: SetRewardAuctionParamsCall) -> Self {
            Self::SetRewardAuctionParams(value)
        }
    }
    ///Container type for all return fields from the `ROLES` function with signature `ROLES()` and selector `0x923cb952`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RolesReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `active` function with signature `active()` and selector `0x02fb0c5e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ActiveReturn(pub bool);
    ///Container type for all return fields from the `auctionDuration` function with signature `auctionDuration()` and selector `0x0cbf54c8`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct AuctionDurationReturn(pub u64);
    ///Container type for all return fields from the `configureDependencies` function with signature `configureDependencies()` and selector `0x9459b875`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ConfigureDependenciesReturn {
        pub dependencies: ::std::vec::Vec<[u8; 5]>,
    }
    ///Container type for all return fields from the `currentReward` function with signature `currentReward()` and selector `0x07621eca`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CurrentRewardReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `distributor` function with signature `distributor()` and selector `0xbfe10928`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DistributorReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `frequency` function with signature `frequency()` and selector `0xead50da3`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FrequencyReturn(pub u64);
    ///Container type for all return fields from the `isActive` function with signature `isActive()` and selector `0x22f3e2d4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsActiveReturn(pub bool);
    ///Container type for all return fields from the `kernel` function with signature `kernel()` and selector `0xd4aae0c4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct KernelReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `lastBeat` function with signature `lastBeat()` and selector `0xd3a7b7d3`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LastBeatReturn(pub u64);
    ///Container type for all return fields from the `maxReward` function with signature `maxReward()` and selector `0x66a78e6c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MaxRewardReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `operator` function with signature `operator()` and selector `0x570ca735`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OperatorReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `requestPermissions` function with signature `requestPermissions()` and selector `0x5924be70`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RequestPermissionsReturn {
        pub permissions: ::std::vec::Vec<Permissions>,
    }
    ///`Permissions(bytes5,bytes4)`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct Permissions {
        pub keycode: [u8; 5],
        pub func_selector: [u8; 4],
    }
}
